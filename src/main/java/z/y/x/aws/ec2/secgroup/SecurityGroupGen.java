package z.y.x.aws.ec2.secgroup;

import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.yaml.snakeyaml.Yaml;

import com.amazonaws.ClientConfiguration;
import com.amazonaws.Protocol;
import com.amazonaws.auth.AWSCredentials;
import com.amazonaws.auth.AWSCredentialsProvider;
import com.amazonaws.auth.BasicAWSCredentials;
import com.amazonaws.auth.DefaultAWSCredentialsProviderChain;
import com.amazonaws.internal.StaticCredentialsProvider;
import com.amazonaws.regions.Regions;
import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeSecurityGroupsRequest;
import com.amazonaws.services.ec2.model.DescribeSecurityGroupsResult;
import com.amazonaws.services.ec2.model.IpPermission;
import com.amazonaws.services.ec2.model.IpRange;
import com.amazonaws.services.ec2.model.Ipv6Range;
import com.amazonaws.services.ec2.model.SecurityGroup;
import com.amazonaws.services.ec2.model.UserIdGroupPair;
import z.y.x.aws.Utils;

public class SecurityGroupGen {

	public static void main(String[] args) {

		try {
			SecurityGroupGen awsTest = new SecurityGroupGen();
			
			String[] sgGroups = new String[] {"sg-066769eeff28400c7","sg-00225257dcaaac4ff"};

			String securityGroup = awsTest.getSecurityGroup("AKIAZVMJVSTHGBN5PZUO",
					"9QHIJX8HqzDjyrKXNUt3KZ//6DkvqsUvv8WvztU3", "us-west-2",sgGroups);

			System.out.println(securityGroup);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}

	}

	public AmazonEC2Client getEC2Client(String accessKey, String secretKey, String region) throws Exception {
		AWSCredentialsProvider provider;
		if (accessKey != null && secretKey != null) {
			AWSCredentials credentials = new BasicAWSCredentials(accessKey, secretKey);
			provider = new StaticCredentialsProvider(credentials);
		} else {
			provider = new DefaultAWSCredentialsProviderChain();
		}
		AmazonEC2Client client = new AmazonEC2Client(provider).withRegion(Regions.fromName(region));
		ClientConfiguration configuration = new ClientConfiguration();
		configuration.setProtocol(Protocol.HTTPS);
		return client;
	}

	public String getSecurityGroup(String accessKey, String secretKey, String region, String ...groupIds ) throws Exception {

		AmazonEC2Client ec2Client = getEC2Client(accessKey, secretKey, region);
		
		DescribeSecurityGroupsRequest request = new DescribeSecurityGroupsRequest().withGroupIds(groupIds);

		
		DescribeSecurityGroupsResult decDescribeSecurityGroupsResult = ec2Client.describeSecurityGroups(request);

		StringWriter writer = new StringWriter();
		Yaml yaml = Utils.getYAML();
		java.util.List<SecurityGroup> securitygroup = decDescribeSecurityGroupsResult.getSecurityGroups();

		AWSSecurityGroupWrapper awsSecurityGroupWrapper = new AWSSecurityGroupWrapper();
		List<Task> listTasks = new ArrayList<>();

		for (Iterator iterator = securitygroup.iterator(); iterator.hasNext();) {
			SecurityGroup securityGroup2 = (SecurityGroup) iterator.next();

			Task task = new Task();
			Ec2Group ec2Group = new Ec2Group();
			ec2Group.setName(securityGroup2.getGroupName());
			ec2Group.setDescription(securityGroup2.getDescription());
			ec2Group.setRegion(Regions.AP_SOUTHEAST_1.getName());
			ec2Group.setVpc_id(securityGroup2.getVpcId());

			java.util.List<com.amazonaws.services.ec2.model.Tag> listTags = securityGroup2.getTags();
			Map<String, String> tagMap = new HashMap<String, String>();
			for (Iterator iterator2 = listTags.iterator(); iterator2.hasNext();) {
				com.amazonaws.services.ec2.model.Tag tag = (com.amazonaws.services.ec2.model.Tag) iterator2.next();
				tagMap.put(tag.getKey(), tag.getValue());
			}

			if (tagMap.size() > 0) {
				ec2Group.setTags(tagMap);
			}

			// ec2Group.se
			java.util.List<IpPermission> iperIpPermissions = securityGroup2.getIpPermissions();

			List<Rule> ruleList = new ArrayList<>();
			List<RulesEgress> ruleListEgress = new ArrayList<>();
			for (Iterator iterator2 = iperIpPermissions.iterator(); iterator2.hasNext();) {
				buildRules(ruleList, iterator2);
			}

			for (Iterator iterator2 = securityGroup2.getIpPermissionsEgress().iterator(); iterator2.hasNext();) {
				builEgressdRules(ruleListEgress, iterator2);
			}

			ec2Group.setRules(ruleList);
			ec2Group.setRules_egress(ruleListEgress);

			task.setEc2_group(ec2Group);
			listTasks.add(task);
			awsSecurityGroupWrapper.setTasks(listTasks);

			// awsSecurityGroupPojo.setEc2_group(ec2Group);

		}

		List<AWSSecurityGroupWrapper> groupWrappersList = new ArrayList<AWSSecurityGroupWrapper>();
		groupWrappersList.add(awsSecurityGroupWrapper);

		yaml.dump(groupWrappersList, writer);

		StringBuilder builder = new StringBuilder();
		builder.append("# Generated by the Online Tool 8gwifi.org \n");
		builder.append(writer.toString());

		return builder.toString();

	}

	private static void buildRules(List<Rule> ruleList, Iterator iterator2) {
		IpPermission ipPermission = (IpPermission) iterator2.next();

		java.util.List<UserIdGroupPair> groupPairs = ipPermission.getUserIdGroupPairs();
		if (groupPairs.size() > 0) {
			for (Iterator iterator3 = groupPairs.iterator(); iterator3.hasNext();) {
				UserIdGroupPair userIdGroupPair = (UserIdGroupPair) iterator3.next();
				Rule rule = new Rule();
				rule.setProto("all");
				rule.setGroup_id(userIdGroupPair.getGroupId());
				rule.setGroup_name(userIdGroupPair.getGroupName());
				rule.setRule_desc(userIdGroupPair.getDescription());
				ruleList.add(rule);
			}
		}

		if (ipPermission.getIpv4Ranges().size() > 0) {
			java.util.List<IpRange> ipRange = ipPermission.getIpv4Ranges();
			for (Iterator iterator3 = ipRange.iterator(); iterator3.hasNext();) {
				IpRange ipRange2 = (IpRange) iterator3.next();
				Rule rule = new Rule();
				rule.setProto(ipPermission.getIpProtocol());
				rule.setFrom_port(ipPermission.getFromPort());
				rule.setTo_port(ipPermission.getToPort());
				rule.setCidr_ip(ipRange2.getCidrIp());
				rule.setRule_desc(ipRange2.getDescription());
				ruleList.add(rule);
			}
		}

		if (ipPermission.getIpv6Ranges().size() > 0) {
			java.util.List<Ipv6Range> ipRange = ipPermission.getIpv6Ranges();
			for (Iterator iterator3 = ipRange.iterator(); iterator3.hasNext();) {
				Ipv6Range ipRange2 = (Ipv6Range) iterator3.next();
				Rule rule = new Rule();
				rule.setProto(ipPermission.getIpProtocol());
				rule.setFrom_port(ipPermission.getFromPort());
				rule.setTo_port(ipPermission.getToPort());
				rule.setCidr_ip(ipRange2.getCidrIpv6());
				rule.setRule_desc(ipRange2.getDescription());
				ruleList.add(rule);
			}
		}

	}

	private static void builEgressdRules(List<RulesEgress> ruleList, Iterator iterator2) {
		IpPermission ipPermission = (IpPermission) iterator2.next();

		java.util.List<UserIdGroupPair> groupPairs = ipPermission.getUserIdGroupPairs();
		if (groupPairs.size() > 0) {
			for (Iterator iterator3 = groupPairs.iterator(); iterator3.hasNext();) {
				UserIdGroupPair userIdGroupPair = (UserIdGroupPair) iterator3.next();
				RulesEgress rule = new RulesEgress();
				rule.setProto("all");
				rule.setGroup_id(userIdGroupPair.getGroupId());
				rule.setGroup_name(userIdGroupPair.getGroupName());
				rule.setRule_desc(userIdGroupPair.getDescription());
				ruleList.add(rule);
			}
		}

		if (ipPermission.getIpv4Ranges().size() > 0) {
			java.util.List<IpRange> ipRange = ipPermission.getIpv4Ranges();
			for (Iterator iterator3 = ipRange.iterator(); iterator3.hasNext();) {
				IpRange ipRange2 = (IpRange) iterator3.next();
				RulesEgress rule = new RulesEgress();
				rule.setProto(ipPermission.getIpProtocol());
				rule.setFrom_port(ipPermission.getFromPort());
				rule.setTo_port(ipPermission.getToPort());
				rule.setCidr_ip(ipRange2.getCidrIp());
				rule.setRule_desc(ipRange2.getDescription());
				ruleList.add(rule);
			}
		}

		if (ipPermission.getIpv6Ranges().size() > 0) {
			java.util.List<Ipv6Range> ipRange = ipPermission.getIpv6Ranges();
			for (Iterator iterator3 = ipRange.iterator(); iterator3.hasNext();) {
				Ipv6Range ipRange2 = (Ipv6Range) iterator3.next();
				RulesEgress rule = new RulesEgress();
				rule.setProto(ipPermission.getIpProtocol());
				rule.setFrom_port(ipPermission.getFromPort());
				rule.setTo_port(ipPermission.getToPort());
				rule.setCidr_ip(ipRange2.getCidrIpv6());
				rule.setRule_desc(ipRange2.getDescription());
				ruleList.add(rule);
			}
		}

	}

	public void lisToCommaSeparated(IpPermission ipPermission) {
		java.util.List<IpRange> ipRange = ipPermission.getIpv4Ranges();
		for (Iterator iterator = ipRange.iterator(); iterator.hasNext();) {
			IpRange ipRange2 = (IpRange) iterator.next();
			ipRange2.getCidrIp();
			ipRange2.getDescription();
		}
	}

}
