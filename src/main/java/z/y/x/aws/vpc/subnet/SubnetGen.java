package z.y.x.aws.vpc.subnet;

import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.yaml.snakeyaml.Yaml;

import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeSubnetsRequest;
import com.amazonaws.services.ec2.model.DescribeSubnetsResult;
import com.amazonaws.services.ec2.model.Subnet;
import com.amazonaws.services.ec2.model.Tag;

import z.y.x.aws.EC2Client;
import z.y.x.aws.Utils;



/**
 * 
 * @author anishnath
 *
 */
public class SubnetGen {

	public String getSubnet(String accessKey, String secretKey, String region, String... subids) throws Exception {
		AmazonEC2Client amazonEC2Client = new EC2Client().getEC2Client(accessKey, secretKey, region);
		
		List<AWSSubnetWrapper> awsSubentrappersList = new ArrayList<>();
		AWSSubnetWrapper awsSubnetWrappers = new AWSSubnetWrapper();
		List<Task> listTasks = new ArrayList<Task>();

		DescribeSubnetsRequest describeSubnetsRequest = new DescribeSubnetsRequest().withSubnetIds(subids);
		DescribeSubnetsResult describeSubnetsResult = null;
		if (subids != null) {
			describeSubnetsResult = amazonEC2Client.describeSubnets(describeSubnetsRequest);
		} else {
			describeSubnetsResult = amazonEC2Client.describeSubnets();
		}

		if (describeSubnetsResult != null) {
			List<Subnet> subnetLists = describeSubnetsResult.getSubnets();
			for (Iterator iterator = subnetLists.iterator(); iterator.hasNext();) {

				Task task = new Task();
				AmazonAwsSubnet amazonAwsSubnet = new AmazonAwsSubnet();
				Map<String, String> tags = new HashMap<>();
				Subnet subnet = (Subnet) iterator.next();
				amazonAwsSubnet.setAz(subnet.getAvailabilityZone());
				amazonAwsSubnet.setCidr(subnet.getCidrBlock());
				amazonAwsSubnet.setVpc_id(subnet.getVpcId());
				if (subnet.getMapPublicIpOnLaunch()) {
					amazonAwsSubnet.setMap_public("yes");
				}
				List<Tag> tagsList = subnet.getTags();
				if (tagsList != null) {
					for (Iterator iterator2 = tagsList.iterator(); iterator2.hasNext();) {
						Tag tag = (Tag) iterator2.next();
						tags.put(tag.getKey(), tag.getValue());
					}// End for child
				}
				
				amazonAwsSubnet.setTags(tags);
				task.setEc2_vpc_subnet(amazonAwsSubnet);
				listTasks.add(task);
			} // End For Loop
		}// End Main if

		awsSubnetWrappers.setTasks(listTasks);
		awsSubentrappersList.add(awsSubnetWrappers);

		StringWriter writer = new StringWriter();
		Yaml yaml = Utils.getYAML();

		yaml.dump(awsSubentrappersList, writer);

		StringBuilder builder = new StringBuilder();
		builder.append("# Generated by the Online Tool 8gwifi.org \n");
		builder.append("# Ansible configs for Subnets \n");
		builder.append(writer.toString());



		String s = builder.toString();

		

		return s;
		

	}

	public static void main(String[] args) throws Exception {
		
	}

}
