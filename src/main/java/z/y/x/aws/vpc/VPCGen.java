package z.y.x.aws.vpc;

import java.io.StringWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import org.yaml.snakeyaml.Yaml;

import com.amazonaws.services.ec2.AmazonEC2Client;
import com.amazonaws.services.ec2.model.DescribeVpcsRequest;
import com.amazonaws.services.ec2.model.DescribeVpcsResult;
import com.amazonaws.services.ec2.model.Tag;
import com.amazonaws.services.ec2.model.Vpc;
import z.y.x.aws.EC2Client;
import z.y.x.aws.Utils;

public class VPCGen {

	public String getVPC(String accessKey, String secretKey, String region, String... vpcids) throws Exception {

		AmazonEC2Client amazonEC2Client = new EC2Client().getEC2Client(accessKey, secretKey, region);
		List<AWSVPCWrapper> awsVPCWrappersList = new ArrayList<>();
		AWSVPCWrapper awsVPCWrappers = new AWSVPCWrapper();
		List<Task> listTasks = new ArrayList<Task>();

		DescribeVpcsResult describeVpcsResult = null;
		if (vpcids != null) {
			DescribeVpcsRequest vpcRequest = new DescribeVpcsRequest().withVpcIds(vpcids);
			describeVpcsResult = amazonEC2Client.describeVpcs(vpcRequest);
		} else {
			describeVpcsResult = amazonEC2Client.describeVpcs();
		}

		if (describeVpcsResult != null) {
			List<Vpc> vpcslist = describeVpcsResult.getVpcs();
			if (vpcslist != null && vpcslist.size() > 0) {
				for (Iterator iterator = vpcslist.iterator(); iterator.hasNext();) {
					Task task = new Task();
					AmazonAwsEc2VpcNet amazonAwsEc2VpcNet = new AmazonAwsEc2VpcNet();
					Map<String, String> tags = new HashMap<>();
					Vpc vpc = (Vpc) iterator.next();
					System.out.println(vpc);
					amazonAwsEc2VpcNet.setCidr_block(vpc.getCidrBlock());
					amazonAwsEc2VpcNet.setTenancy(vpc.getInstanceTenancy());
					List<Tag> tagList = vpc.getTags();
					for (Iterator iterator2 = tagList.iterator(); iterator2.hasNext();) {
						Tag tag = (Tag) iterator2.next();
						
						if("Name".equals(tag.getKey()))
						{
							amazonAwsEc2VpcNet.setName(tag.getValue());
						}
						
						tags.put(tag.getKey(), tag.getValue());
					}
					amazonAwsEc2VpcNet.setTags(tags);
					task.setEc2_vpc_net(amazonAwsEc2VpcNet);
					listTasks.add(task);
				} // End of For Loop
			}
		} // End of describeVpcsResult not nyll
		
		awsVPCWrappers.setTasks(listTasks);
		awsVPCWrappersList.add(awsVPCWrappers);
		
		StringWriter writer = new StringWriter();
		Yaml yaml = Utils.getYAML();

		yaml.dump(awsVPCWrappersList, writer);

		StringBuilder builder = new StringBuilder();
		builder.append("# Generated by the Online Tool 8gwifi.org \n");
		builder.append(writer.toString());

		// System.out.println(builder.toString());

		
		String s = builder.toString();

		//s = s.replaceAll("amazonawsec2_vpc_net", "ec2_vpc_net");

		//System.out.println(s);
		return s;

		
	}

	public static void main(String[] args) throws Exception {
		
	}

}
