<%@ page import="java.security.SecureRandom" %>
<%@ page import="org.apache.commons.codec.binary.Base64" %>
<!DOCTYPE html>
<html>
<head>
	<title>PBKDF2 Derive Key Online</title>
	<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'>

	<meta name="description" content="pbkd2 derive key online, how pbkdf2 works, pbkdf2 tutorial, pbkdf1 vs pbksdf2"/>
	<meta name="keywords" content="pbkd2 derive key online, how pbkdf2 works, pbkdf2 tutorial, pbkdf1 vs pbksdf2, how to secure passwords using pbkf2, PBKDF2WithHmacSHA256, PBKDF2WithHmacSHA224,PBKDF2WithHmacSHA512, pbkdf2 tutorial, pbkd2 derive key java, go lang, python"/>
	<meta name="author" content="CRYPO" />
	<meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

	<%@ include file="header-script.jsp"%>

	<%
		String[] validList =  { "PBKDF2WithHmacSHA256","PBKDF2WithHmacSHA224","PBKDF2WithHmacSHA512" ,"PBKDF2WithHmacSHA384" };
		byte[] salt = new byte[16];
		new SecureRandom().nextBytes(salt);


	%>


	<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
	<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "SoftwareApplication",
  "name" : "PBE Encrypt/Decrypt Message",
  "image" : "https://8gwifi.org/images/site/pbkdf2.png",
  "url" : "https://8gwifi.org/pbe.jsp",
  "author" : {
    "@type" : "Person",
    "name" : "Anish Nath"
  },
  "datePublished" : "2018-11-29",
  "applicationCategory" : [ "pbkdf2 derive key online", "PBKDF2WithHmacSHA256" ,"PBKDF2WithHmacSHA224", "PBKDF2WithHmacSHA384", "how pbkdf2 works" ],
  "downloadUrl" : "https://8gwifi.org/pbkdf2.jsp",
  "operatingSystem" : "Linux,Unix,Windows,Redhat,RHEL,Fedora,Ubuntu",
  "requirements" : "pbkdf2 tutorial, pbkd2 derive key java, go lang, python ",
  "softwareVersion" : "v1.0"
}
</script>


	<script type="text/javascript">
		$(document).ready(function() {



			$('#cipherparameternew').change(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});


			$('#plaintext').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#keylength').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#secretkey').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});


			$('#encrypt').click(function(event) {
				$('#form').delay(200).submit()
			});

			$('#decrypt').click(function(event) {
				$('#form').delay(200).submit()
			});


			$('#encryptparameter').click(function(event) {
				$('#form').delay(200).submit()
			});

			$('#decryptparameter').click(function(event) {
				$('#form').delay(200).submit()
			});


			$('#salt').keyup(function(event) {
				$('#form').delay(200).submit()
			});

			$('#rounds').keyup(function(event) {
				$('#form').delay(200).submit()
			});

			$('#password').keyup(function(event) {
				$('#form').delay(200).submit()
			});



			$('#form').submit(function(event) {
				//
				$('#output').html('<img src="images/712.GIF"> loading...');
				event.preventDefault();
				$.ajax({
					type : "POST",
					url : "PBEFunctionality", //this is my servlet

					data : $("#form").serialize(),
					success : function(msg) {
						$('#output').empty();
						$('#output').append(msg);

					}
				});
			});

		});
	</script>
</head>
<%@ include file="body-script.jsp"%>

<h1 class="mt-4">PBKDF2 Derive Key</h1>
<hr>

<div id="loading" style="display: none;">
	<img src="images/712.GIF" alt="" />Loading!
</div>


			<form id="form" method="POST">

				<input type="hidden" name="methodName" id="methodName" value="PBKDFDERIVEKEY">

				<div class="form-group">
					<label for="password">Master Password</label>
					<input type="password" name="password" class="form-control" id="password"  placeholder="input the password.. to derive the key using pbkdf2">
				</div>

				<div class="form-group">
					<label for="password">Salt (Input Base64 Empty salt will generate a random 16 bits salt value)</label>
					<input type="salt" name="salt" class="form-control" id="salt" value="<%=new String(Base64.encodeBase64(salt))%>"  placeholder="">
				</div>

				<div class="form-group">
					<label for="password">Iteration </label>
					<input type="text" name="rounds" class="form-control" id="rounds" value="1000" onkeypress="if ( isNaN(this.value + String.fromCharCode(event.keyCode) )) return false;" placeholder="1000">
				</div>

				<div class="form-group">
					<label for="keylength">dkLen</label>
					<input type="text" name="keylength" class="form-control" id="keylength" value="128" onkeypress="if ( isNaN(this.value + String.fromCharCode(event.keyCode) )) return false;" placeholder="1000">
				</div>


				<div class="form-group">
					<label for="cipherparameternew">PBE Ciphers</label>
				<select class="form-control" size="10" multiple name="cipherparameternew" id="cipherparameternew">
					<option selected value="PBKDF2WithHmacSHA1">PBKDF2WithHmacSHA1</option>
					<%
						for (int i = 0; i < validList.length; i++) {
							String param = validList[i];
					%>
					<option value="<%=param%>"><%=param%></option>
					<%}%>
				</select>
					</div>

			</form>

<hr>

<div id="output"></div>



<hr>



<div class="sharethis-inline-share-buttons"></div>
<%@ include file="thanks.jsp"%>

<hr>

<%@ include file="footer_adsense.jsp"%>

<h2 class="mt-4" id="thepbealgo">PBKDF2</h2>
<p><strong>PBKDF2</strong> applies a pseudorandom function, such as hash-based message authentication code (HMAC), to the input password or passphrase along with a salt value and repeats the process many times to produce a derived key, which can then be used as a cryptographic key in subsequent operations. The added computational work makes password cracking much more difficult, and is known as key stretching.</p>
<p>The PBKDF2 key derivation function has five input parameters:</p>
<pre><code>DK = PBKDF2(PRF, Password, Salt, c, dkLen)
</code></pre>
<p><strong>where:</strong></p>
<ul>
	<li><strong>PRF</strong> is a pseudorandom function of two parameters with output length hLen (e.g. a keyed HMAC)</li>
	<li><strong>Password</strong> is the master password from which a derived key is generated</li>
	<li><strong>Salt</strong> is a sequence of bits, known as a cryptographic salt</li>
	<li><strong>c</strong> is the number of iterations desired</li>
	<li><strong>dkLen</strong> is the desired bit-length of the derived key</li>
	<li><strong>DK</strong> is the generated derived key.</li>
</ul>
<p>For example, using:</p>
<ul>
	<li><strong>password</strong>: Hello</li>
	<li><strong>PRF</strong>: PBKDF2WithHmacSHA512</li>
	<li><strong>Salt:</strong>  vQIHs71+xAa4lxK9J+VhfA==</li>
	<li><strong>Iterations:</strong>  1,000</li>
	<li><strong>Derived key length:</strong>  128 bytes</li>
</ul>
<p>will generate the same derived key bytes (<code>tlXeEf65TEWTW41acGi/4A==</code>).</p>

<%@ include file="addcomments.jsp"%>

</div>

<%@ include file="body-close.jsp"%>
