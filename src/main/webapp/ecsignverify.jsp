<%@ page import="z.y.x.Security.RSAUtil" %>
<%@ page import="java.security.KeyPair" %>
<%@ page import="z.y.x.Security.ecpojo" %>
<%@ page import="com.google.gson.Gson" %>
<%@ page import="org.apache.http.impl.client.DefaultHttpClient" %>
<%@ page import="org.apache.http.client.methods.HttpGet" %>
<%@ page import="org.apache.http.HttpResponse" %>
<%@ page import="java.io.BufferedReader" %>
<%@ page import="java.io.InputStreamReader" %>
<%@ page import="z.y.x.r.LoadPropertyFileFunctionality" %>
<!DOCTYPE html>
<html>
<head>


	<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
	<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "SoftwareApplication",
  "name" : "Elliptic Curve key generate Sign Verify Message",
  "image" : "https://8gwifi.org/images/site/ec.png",
  "url" : "https://8gwifi.org/ecsignverify.jsp",
  "author" : {
    "@type" : "Person",
    "name" : "Anish Nath"
  },
  "datePublished" : "2018-10-26",
  "applicationCategory" : [ "online ec curve key generation", "ec curve generate", "c2pnb272w1", "c2tnb359v1", "prime256v1", "c2pnb304w1", "c2pnb368w1", "c2tnb431r1",
					"sect283r1", "sect283k1", "secp256r1", "sect571r1", "sect571k1", "sect409r1", "sect409k1",
					"secp521r1", "secp384r1", "P-521", "P-256", "P-384", "B-409", "B-283", "B-571", "K-409", "K-283",
					"K-571", "brainpoolp512r1", "brainpoolp384t1", "brainpoolp256r1", "brainpoolp512t1", "brainpoolp256t1",
					"brainpoolp320r1", "brainpoolp384r1", "brainpoolp320t1", "FRP256v1", "sm2p256v1" , "ec message signing" , "online ec message verification" , "ec private key pem" , "ec public key pem" ],
  "downloadUrl" : "https://8gwifi.org/ecsignverify.jsp",
  "operatingSystem" : "Linux,Unix,Windows,Redhat,RHEL,Fedora,Ubuntu,Android,iPhone",
  "requirements" : "online elliptic curve key generation with curve name, ecdsa generate key perform signature generation validation, ecdsa sign message, ecdsa verify message, ec generate curve sect283r1,sect283k1,secp256k1,secp256r1,sect571r1,sect571k1,sect409r1,sect409k1, ec key in pem format ",
  "softwareVersion" : "v1.0"
}
</script>

	<title>online elliptic curve generate key, sign verify message, bitcoin curve </title>
	<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'>

	<meta name="keywords" content="elliptic curve, ecdsa generate key perform signature generation validation java, ecdsa, ecdsa sign message, ecdsa verify message, ec generate curve, bitcoin" />
	<meta name="description" content="online elliptic curve key generation with curve name, ecdsa generate key perform signature generation validation, ecdsa sign message, ecdsa verify message, ec generate curve sect283r1,sect283k1,secp256k1,secp256r1,sect571r1,sect571k1,sect409r1,sect409k1, ecdsa bitcoin tutorial" />

	<meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

	<%@ include file="header-script.jsp"%>

	<%
		String pubKey = "";
		String privKey = "";
		String checkedKey="512";
		boolean k1=false;
		boolean k2=false;
		boolean k3=false;
		boolean k4=false;


		if (request.getSession().getAttribute("pubkey")==null) {
//			KeyPair kp = RSAUtil.generateKey(1024);
//			pubKey =RSAUtil.toPem(kp.getPublic());
//			privKey = RSAUtil.toPem(kp);

			Gson gson = new Gson();
			DefaultHttpClient httpClient = new DefaultHttpClient();
			String url1 = LoadPropertyFileFunctionality.getConfigProperty().get("ep") + "ec/generatekpecdsa/secp256k1";

			//System.out.println(url1);

			HttpGet getRequest = new HttpGet(url1);
			getRequest.addHeader("accept", "application/json");

			HttpResponse response1 = httpClient.execute(getRequest);


			BufferedReader br = new BufferedReader(
					new InputStreamReader(
							(response1.getEntity().getContent())
					)
			);

			StringBuilder content = new StringBuilder();
			String line;
			while (null != (line = br.readLine())) {
				content.append(line);
			}
			ecpojo ecpojo = (ecpojo) gson.fromJson(content.toString(), ecpojo.class);

			pubKey = ecpojo.getEcprivateKeyA();
			privKey = ecpojo.getEcpubliceKeyA();
			k2=true;
		}
		else {
			pubKey = (String)request.getSession().getAttribute("pubkey");
			privKey = (String)request.getSession().getAttribute("privKey");
			checkedKey = (String)request.getSession().getAttribute("keysize");
		}



		//System.out.println(k1);
		//System.out.println(k2);
		//System.out.println(k3);
		//System.out.println(k4);

	%>

	<script type="text/javascript">
		$(document).ready(function() {


			$('#ctrTitles').change(function() {
				pem = $(this).val();
				$("#pem").val(pem);
			});



			$('#submit').click(function(event) {
				$('#form').delay(200).submit()
			});

			$('#publickeyparam').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#privatekeyparam').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});


			$('#message').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});



			$('#keysize1').click(function(event) {
				//
				// event.preventDefault();
				$('#form1').delay(200).submit()
			});

			$('#keysize2').click(function(event) {
				//
				// event.preventDefault();
				$('#form1').delay(200).submit()
			});

			$('#keysize3').click(function(event) {
				//
				// event.preventDefault();
				$('#form1').delay(200).submit()
			});

			$('#keysize4').click(function(event) {
				//
				// event.preventDefault();
				$('#form1').delay(200).submit()
			});

			$('#cipherparameter1').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#cipherparameter2').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#cipherparameter3').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#cipherparameter4').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#encryptparameter').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#decryptparameter').click(function(event) {

				var text = $('#output').find('textarea[name="encrypedmessagetextarea"]').val();
				if ( text != null ) {
					$("#signature").val(text);
				}
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});


			$('#form').submit(function(event) {
				//
				$('#output').html('<img src="images/712.GIF"> loading...');
				event.preventDefault();
				$.ajax({
					type : "POST",
					url : "ECFunctionality", //this is my servlet

					data : $("#form").serialize(),
					success : function(msg) {
						$('#output').empty();
						$('#output').append(msg);
						$("#publickeyparam").resizable();
						$("#privatekeyparam").resizable();

					}
				});
			});

		});
	</script>
</head>


<%@ include file="body-script.jsp"%>

<h1 class="mt-4">EC Signature Generate &  Verification</h1>
<hr>


<div id="loading" style="display: none;">
	<img src="images/712.GIF" alt="" />Loading!
</div>


<form id="form1" action="ECFunctionality" method="POST">
	<input type="hidden" name="methodName" id="methodName"  value="EC_GENERATE_KEYPAIR_ECDSA">

		<p>
			<b> Elliptic Curve Generate Keys</b>
		</p>

		Choose ECParam<select name="ecparam" id="ecparam">
		<option value="secp256k1">secp256k1</option>
		<%
			String[] validList = { "c2pnb272w1", "c2tnb359v1", "prime256v1", "c2pnb304w1", "c2pnb368w1", "c2tnb431r1",
					"sect283r1", "sect283k1", "secp256r1", "sect571r1", "sect571k1", "sect409r1", "sect409k1",
					"secp521r1", "secp384r1", "P-521", "P-256", "P-384", "B-409", "B-283", "B-571", "K-409", "K-283",
					"K-571", "brainpoolp512r1", "brainpoolp384t1", "brainpoolp256r1", "brainpoolp512t1", "brainpoolp256t1",
					"brainpoolp320r1", "brainpoolp384r1", "brainpoolp320t1", "FRP256v1", "sm2p256v1" };
			for (int i = 0; i < validList.length; i++) {
				String param = validList[i];
		%>
		<option value="<%=param%>"> <%=param%></option>
		<%	} %>
	</select> <input type="submit" class="btn btn-primary" name="Generate EC" value="submit">
		<br>
</form>






<form id="form" class="form-horizontal" method="POST">
	<input type="hidden" name="methodName" id="EC_SIGN_VERIFY_MESSAGEE"
		   value="EC_SIGN_VERIFY_MESSAGEE">


	<div class="radio">
		<label>
			<input checked id="encryptparameter" type="radio" name="encryptdecryptparameter" value="encrypt">
			Generate Signature
		</label>
	</div>
	<div class="radio">
		<label>
			<input id="decryptparameter" type="radio" name="encryptdecryptparameter" value="decryprt">
			Verify Signature
		</label>
	</div>

	<table class="table">
		<tr>
			<th>Private Key </th>
			<th>Public Key </th>
		</tr>

		<tr>
			<td>
				<textarea class="form-control animated" rows="8"   name="publickeyparam" id="publickeyparam"><%= pubKey %></textarea>
			</td>
			<td>
				<textarea class="form-control animated" rows="8"   name="privatekeyparam" id="privatekeyparam"><%= privKey %></textarea>
			</td>


		</tr>

		<tr>
			<td>
				<b>Plain Text Message Message</b><textarea class="form-control" rows="5"  placeholder="Type your plain text message here..."  name="message" id="message"></textarea>
			</td>
			<td width="50%">
				<b>Output Signature</b><div id="output"></div>
			</td>
		</tr>

		<tr>
			<td colspan="2">Provide Signature Value (Base64) <input class="form-control"  type="text" id="signature" size="100" name="signature">

			</td>
		</tr>

	</table>

	<input type="submit" class="btn btn-primary" name="Generate EC" value="submit">

</form>

<hr>

<div class="sharethis-inline-share-buttons"></div>
<%@ include file="thanks.jsp"%>

<hr>

<%@ include file="footer_adsense.jsp"%>

<h2 class="mt-4" id="thersaalgorithm">The EC Sign Verify</h2>

<p><strong>Elliptic Curve Digital Signature Algorithm</strong>  or  <strong>ECDSA</strong>  is a cryptographic algorithm used by Bitcoin to ensure that funds can only be spent by their rightful owners.</p>
<p>This tool is capable of generating key the the curve</p>
<pre><code>&quot;c2pnb272w1&quot;, &quot;c2tnb359v1&quot;, &quot;prime256v1&quot;, &quot;c2pnb304w1&quot;, &quot;c2pnb368w1&quot;, &quot;c2tnb431r1&quot;,
  &quot;sect283r1&quot;, &quot;sect283k1&quot;, &quot;secp256r1&quot;, &quot;sect571r1&quot;, &quot;sect571k1&quot;, &quot;sect409r1&quot;, &quot;sect409k1&quot;,
  &quot;secp521r1&quot;, &quot;secp384r1&quot;, &quot;P-521&quot;, &quot;P-256&quot;, &quot;P-384&quot;, &quot;B-409&quot;, &quot;B-283&quot;, &quot;B-571&quot;, &quot;K-409&quot;, &quot;K-283&quot;,
  &quot;K-571&quot;, &quot;brainpoolp512r1&quot;, &quot;brainpoolp384t1&quot;, &quot;brainpoolp256r1&quot;, &quot;brainpoolp512t1&quot;, &quot;brainpoolp256t1&quot;,
  &quot;brainpoolp320r1&quot;, &quot;brainpoolp384r1&quot;, &quot;brainpoolp320t1&quot;, &quot;FRP256v1&quot;, &quot;sm2p256v1&quot;
</code></pre>
<p><strong>secp256k1</strong> refers to the parameters of the elliptic curve used in Bitcoin’s public-key cryptography, and is defined in <em>Standards for Efficient Cryptography (SEC)</em></p>
<p>A few concepts related to ECDSA:</p>
<ul>
	<li><strong>private key</strong>: A secret number, known only to the person that generated it. A private key is essentially a randomly generated number. In Bitcoin, a private key is a single unsigned 256 bit integer (32 bytes).</li>
	<li><strong>public key</strong>: A number that corresponds to a private key, but does not need to be kept secret. A public key can be calculated from a private key, but not vice versa. A public key can be used to determine if a signature is genuine (in other words, produced with the proper key) without requiring the private key to be divulged.</li>
	<li><strong>signature</strong>: A number that proves that a signing operation took place.</li>
</ul>
<p><strong>Openssl Generating EC Keys and Parameters</strong></p>
<pre><code>$ openssl ecparam -list_curves
secp256k1 : SECG curve over a 256 bit prime field
secp384r1 : NIST/SECG curve over a 384 bit prime field
secp521r1 : NIST/SECG curve over a 521 bit prime field
prime256v1: X9.62/SECG curve over a 256 bit prime field
</code></pre>
<p><strong>An EC parameters file can then be generated for any of the built-in named curves as follows:</strong></p>
<pre><code>$ openssl ecparam -name secp256k1 -out secp256k1.pem
$ cat secp256k1.pem
 -----BEGIN EC PARAMETERS-----
 BgUrgQQACg==
 -----END EC PARAMETERS-----
</code></pre>
<p><strong>To generate a private/public key pair from a pre-eixsting parameters file use the following:</strong></p>
<pre><code>$ openssl ecparam -in secp256k1.pem -genkey -noout -out secp256k1-key.pem
$ cat secp256k1-key.pem
 -----BEGIN EC PRIVATE KEY-----
 MHQCAQEEIKRPdj7XMkxO8nehl7iYF9WAnr2Jdvo4OFqceqoBjc8/oAcGBSuBBAAK
 oUQDQgAE7qXaOiK9jgWezLxemv+lxQ/9/Q68pYCox/y1vD1fhvosggCxIkiNOZrD
 kHqms0N+huh92A/vfI5FyDZx0+cHww==
 -----END EC PRIVATE KEY-----
</code></pre>
<p><strong>Examine the specific details of the parameters associated with a particular named curve</strong></p>
<pre><code>$ openssl ecparam -in secp256k1.pem -text -param_enc explicit -noout
Field Type: prime-field
 Prime:
 00:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:
 ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:fe:ff:
 ff:fc:2f
 A: 0
 B: 7 (0x7)
 Generator (uncompressed):
 04:79:be:66:7e:f9:dc:bb:ac:55:a0:62:95:ce:87:
 0b:07:02:9b:fc:db:2d:ce:28:d9:59:f2:81:5b:16:
 f8:17:98:48:3a:da:77:26:a3:c4:65:5d:a4:fb:fc:
 0e:11:08:a8:fd:17:b4:48:a6:85:54:19:9c:47:d0:
 8f:fb:10:d4:b8
 Order:
 00:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:
 ff:fe:ba:ae:dc:e6:af:48:a0:3b:bf:d2:5e:8c:d0:
 36:41:41
 Cofactor: 1 (0x1)</code></pre>

<%@ include file="addcomments.jsp"%>

</div>

<%@ include file="body-close.jsp"%>
