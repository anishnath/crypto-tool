<!DOCTYPE html>
<html>
<head>
<title>Strong Random Password Generator Online with Entropy</title>
    <meta content='text/html; charset=UTF-8' http-equiv='Content-Type'>
    <meta name="description" content="This tool allows you to generate random passwords using true randomness,Strong Password Generator to create secure random passwords"/>
    <meta name="keywords"
          content="Password Generator, Online Password Generator, Random Password Generator, Secure Password Generator, Create Password, Generate Password, Strong password entropy" />
<%@ include file="include_css.jsp" %>

	<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->

	<script type="application/ld+json">
    {
    "@context" : "http://schema.org",
    "@type" : "SoftwareApplication",
    "name" : "Strong Random Password Generator Online with Entropy",
    "image" : "https://github.com/anishnath/crypto-tool/blob/master/pass.png",
    "url" : "https://8gwifi.org/passwdgen.jsp",
    "author" : {
    "@type" : "Person",
    "name" : "Anish Nath"
    },
    "datePublished" : "2018-05-26",
    "applicationCategory" : [ "Password Generator", "Online Password Generator", "Random Password Generator", "Secure Password Generator", "Create Password", "Strong password entropy"],
    "downloadUrl" : "https://8gwifi.org/passwdgen.jsp",
    "operatingSystem" : "Linux,Unix,Windows,Redhat,RHEL,Fedora,Ubuntu,Android,iPhone",
    "requirements" : "Password Generator, Online Password Generator, Random Password Generator, Secure Password Generator, Create Password, Generate Password, Strong password entropy",
    "softwareVersion" : "v1.0"
    }
    </script>

<script type="text/javascript">
    "use strict";

    var CHARACTER_SETS = [
    [true, "Numbers", "0123456789"],
    [true, "Lowercase", "abcdefghijklmnopqrstuvwxyz"],
    [false, "Uppercase", "ABCDEFGHIJKLMNOPQRSTUVWXYZ"],
    [false, "ASCII symbols", "!\"#$%" + String.fromCharCode(38) + "'()*+,-./:;" + String.fromCharCode(60) + "=>?@[\\]^_`{|}~"],
    [false, "Space", " "],
    ];

    var passwordText = document.createTextNode("");
    var statisticsText = document.createTextNode("\u00A0");

    function init() {
    //document.getElementById("password").appendChild(passwordText);
    //document.getElementById("statistics").appendChild(statisticsText);
    var elements = document.createDocumentFragment();
    CHARACTER_SETS.forEach(function(entry, i) {
    var spanElem = document.createElement("span");
    var inputElem = document.createElement("input");
    inputElem.type = "checkbox";
    inputElem.checked = entry[0];
    inputElem.id = "charset-" + i;
    spanElem.appendChild(inputElem);
    var labelElem = document.createElement("label");
    labelElem.htmlFor = inputElem.id;
    labelElem.appendChild(document.createTextNode(" " + entry[1] + " "));
    var smallElem = document.createElement("small");
    smallElem.appendChild(document.createTextNode("(" + entry[2] + ")"));
    labelElem.appendChild(smallElem);
    spanElem.appendChild(labelElem);
    elements.appendChild(spanElem);
    elements.appendChild(document.createElement("br"));
    });
    var containerElem = document.getElementById("charset-checkboxes");
    containerElem.insertBefore(elements, containerElem.firstChild);
    }

    init();

    // The one and only function called from the HTML code
    function generate() {
    // Gather the character set
    var charsetStr = "";
    CHARACTER_SETS.forEach(function(entry, i) {
    if (document.getElementById("charset-" + i).checked)
    charsetStr += entry[2];
    });
    if (document.getElementById("custom").checked)
    charsetStr += document.getElementById("customchars").value;
    charsetStr = charsetStr.replace(/ /, "\u00A0");  // Replace space with non-breaking space

    // Convert to array and remove duplicate characters
    var charset = [];
    for (var i = 0; charsetStr.length > i; i++) {
    var c = charsetStr.charCodeAt(i);
    var s = null;
    if (0xD800 > c || c >= 0xE000)  // Regular UTF-16 character
    s = charsetStr.charAt(i);
    else if (c >= 0xD800 ? 0xDC00 > c : false) {  // High surrogate
    if (charsetStr.length > i + 1) {
    var d = charsetStr.charCodeAt(i + 1);
    if (d >= 0xDC00 ? 0xE000 > d : false) {
    // Valid character in supplementary plane
    s = charsetStr.substr(i, 2);
    i++;
    }
    // Else discard unpaired surrogate
    }
    } else if (d >= 0xDC00 ? 0xE000 > d : false)  // Low surrogate
    i++;  // Discard unpaired surrogate
    else
    throw "Assertion error";
    if (s != null ? charset.indexOf(s) == -1 : false)
    charset.push(s);
    }

    var password = "";
    var statistics = "";
    if (charset.length == 0)
    alert("Error: Character set is empty");
    else if (document.getElementById("by-entropy").checked ? charset.length == 1 : false)
    alert("Error: Need at least 2 distinct characters in set");
    else {
    var length;
    if (document.getElementById("by-length").checked)
    length = parseInt(document.getElementById("length").value, 10);
    else if (document.getElementById("by-entropy").checked)
    length = Math.ceil(parseFloat(document.getElementById("entropy").value) * Math.log(2) / Math.log(charset.length));
    else
    throw "Assertion error";

    if (0 > length)
    alert("Negative password length");
    else if (length > 10000)
    alert("Password length too large");
    else {
    for (var i = 0; length > i; i++)
    password += charset[randomInt(charset.length)];

    var entropy = Math.log(charset.length) * length / Math.log(2);
    var entropystr;
    if (70 > entropy)
    entropystr = entropy.toFixed(2);
    else if (200 > entropy)
    entropystr = entropy.toFixed(1);
    else
    entropystr = entropy.toFixed(0);
    statistics = "Length = " + length + " chars, \u00A0\u00A0Charset size = " + charset.length + " symbols, \u00A0\u00A0Entropy = " + entropystr + " bits";
    }
    }
    passwordText.data = password;
    statisticsText.data = statistics;
    document.getElementById("password").value=password
    document.getElementById("statistics").value=statistics


    //alert(document.getElementById("length").value)
    //alert(statistics)
    }

    // Returns a random integer in the range [0, n) using a variety of methods
    function randomInt(n) {
    var x = randomIntMathRandom(n);
    x = (x + randomIntBrowserCrypto(n)) % n;
    return x;
    }

    // Not secure or high quality, but always available
    function randomIntMathRandom(n) {
    var x = Math.floor(Math.random() * n);
    if (0 > x || x >= n)
    throw "Arithmetic exception";
    return x;
    }

    var cryptoObject = null;

    // Uses a secure, unpredictable random number generator if available; otherwise returns 0
    function randomIntBrowserCrypto(n) {
    if (cryptoObject == null)
    return 0;
    // Generate an unbiased sample
    var x = new Uint32Array(1);
    do cryptoObject.getRandomValues(x);
    while (x[0] - x[0] % n > 4294967296 - n);
    return x[0] % n;
    }

    function initCrypto() {
    var textNode = document.createTextNode("\u2717");
    document.getElementById("crypto-getrandomvalues-entropy").appendChild(textNode);

    if ("crypto" in window)
    cryptoObject = crypto;
    else if ("msCrypto" in window)
    cryptoObject = msCrypto;
    else
    return;

    if (!("getRandomValues" in cryptoObject) || !("Uint32Array" in window) || typeof Uint32Array != "function")
    cryptoObject = null;
    else
    textNode.data = "\u2713";
    }

    initCrypto();
    </script>

    </head>
    <body>
    <div id="page">
            <%@ include file="include.jsp" %>
            <article id="contentWrapper" role="main">
            <section id="content">
            <form method="get" onsubmit="generate(); return false;">
            <fieldset name="Generate Random Password">
            <legend>
            <B>Random Password Generator </B>
    </legend>

    <p  id="charset-checkboxes">
            <span><input type="checkbox" id="charset-0" />
            <label for="charset-0"> Numbers <small>(0123456789)</small></label></span><br />
            <span><input type="checkbox" checked="checked" id="charset-1" />
            <label for="charset-1"> Lowercase <small>(abcdefghijklmnopqrstuvwxyz)</small></label></span><br />
            <span><input type="checkbox" id="charset-2" />
            <label for="charset-2"> Uppercase <small>(ABCDEFGHIJKLMNOPQRSTUVWXYZ)</small></label></span><br />
            <span><input type="checkbox" id="charset-3" />
            <label for="charset-3"> ASCII symbols <small>(!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[\]^_`{|}~)</small></label></span><br /><span><input type="checkbox" id="charset-4" /><label for="charset-4"> Space <small>( )</small></label></span><br />
    <span><input type="checkbox" id="custom" /><label for="custom"> Custom:</label> <input type="text" id="customchars" value="" size="15" style="width:10em; font-size:80%; line-height:1.5" oninput="document.getElementById('custom').checked=true;" /></span>
            </p>

            <div  class="section"><div><table id="type">
            <tbody>
            <tr>
            <td><input type="radio" name="type" id="by-length" checked="checked" /> <label for="by-length">Length:</label></td>
    <td><input type="number" min="0" value="10" step="1" id="length" style="width:4" oninput="document.getElementById('by-length').checked=true;" /> characters</td>
            </tr>
            <tr>
            <td><input type="radio" name="type" id="by-entropy" />
            <label for="by-entropy">Entropy</label></td>
            <td><input type="number" min="0" value="128" step="any" id="entropy" style="width:4" oninput="document.getElementById('by-entropy').checked=true;" /> bits</td>
            </tr>
            </tbody>
            </table></div></div>

            <p>
            <input type="submit" value="Generate password" style="padding:0.5em 0.5em" />:
    Generated Password<input type="text" readonly="true" size="30" id="password" name="password" placeholder="your Password will appear here">
            <br/>
            Statistics <input type="text" id="statistics" readonly="true" size="100" name="statistics" placeholder="Statistics will appear here">
            </p>
            </fieldset>




            </form>
            <%@ include file="include_security_links.jsp"%>
            <%@ include file="footer.jsp"%>

    </section>
    </article>

    </div>
    </body>
    </html>