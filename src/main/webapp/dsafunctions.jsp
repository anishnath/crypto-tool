<%@ page import="z.y.x.Security.RSAUtil" %>
<%@ page import="java.security.KeyPair" %>
<%@ page import="com.google.gson.Gson" %>
<%@ page import="org.apache.http.impl.client.DefaultHttpClient" %>
<%@ page import="org.apache.http.client.methods.HttpGet" %>
<%@ page import="org.apache.http.HttpResponse" %>
<%@ page import="java.io.BufferedReader" %>
<%@ page import="java.io.InputStreamReader" %>
<%@ page import="z.y.x.Security.pgppojo" %>
<!DOCTYPE html>
<html>
<head>


	<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
	<script type="application/ld+json">
{
  "@context" : "http://schema.org",
  "@type" : "SoftwareApplication",
  "name" : "Online DSA Kegenerator, Generate Signature file , DSA Signature Verifier",
  "image" : "https://github.com/anishnath/crypto-tool/blob/master/dsa.png",
  "url" : "https://8gwifi.org/dsafunctions.jsp",
  "author" : {
    "@type" : "Person",
    "name" : "Anish Nath"
  },
  "datePublished" : "2018-03-04",
  "applicationCategory" : [ "dsa key generation", "dsa file verification", "openssl dsa keygen", "openssl sign file verification", "online dsa", "dsa create signature file", "dsa verify signature file", "SHA256withDSA", "NONEwithDSA", "SHA224withDSA", "SHA1withDSA"],
  "downloadUrl" : "https://8gwifi.org/dsafunctions.jsp",
  "operatingSystem" : "Linux,Unix,Windows,Redhat,RHEL,Fedora,Ubuntu,Android,iPhone",
  "requirements" : "dsa private key public key, dsa keygen, dsa generate signature file, dsa verify signature file",
  "softwareVersion" : "v1.0"
}
</script>

	<title>DSA Generate Keys,DSA Sign file Gneerate, Verify Signature file</title>
	<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'>

	<meta name="keywords" content="online dsa key generation,dsa file verification,openssl dsa keygen,openssl sign file verification,online dsa,dsa create signature file,dsa verify signature file,SHA256withDSA,NONEwithDSA,SHA224withDSA,SHA1withDSA"/>
	<meta name="description" content="Online DSA Algorithm, generate dsa private keys and public keys,dsa file verification,openssl dsa keygen,openssl sign file verification,online dsa,dsa create signature file,dsa verify signature file,SHA256withDSA,NONEwithDSA,SHA224withDSA,SHA1withDSA" />

	<meta name="robots" content="index,follow" />
	<meta name="googlebot" content="index,follow" />
	<meta name="resource-type" content="document" />
	<meta name="classification" content="tools" />
	<meta name="language" content="en" />

	<%@ include file="include_css.jsp"%>

	<%
		String pubKey = "";
		String privKey = "";
		String checkedKey="512";
		boolean k1=false;
		boolean k2=false;
		boolean k3=false;
		boolean k4=false;


		if (request.getSession().getAttribute("pubkey")==null) {

			Gson gson = new Gson();
			DefaultHttpClient httpClient = new DefaultHttpClient();
			String url1 = "http://localhost/crypto/rest/dsa/" + 1024;

			//System.out.println(url1);

			HttpGet getRequest = new HttpGet(url1);
			getRequest.addHeader("accept", "application/json");

			HttpResponse response1 = httpClient.execute(getRequest);


			BufferedReader br = new BufferedReader(
					new InputStreamReader(
							(response1.getEntity().getContent())
					)
			);

			StringBuilder content = new StringBuilder();
			String line;
			while (null != (line = br.readLine())) {
				content.append(line);
			}
			pgppojo pgppojo = (pgppojo) gson.fromJson(content.toString(), pgppojo.class);


			pubKey =pgppojo.getPubliceKey();
			privKey = pgppojo.getPrivateKey();
			k2=true;
		}
		else {
			pubKey = (String)request.getSession().getAttribute("pubkey");
			privKey = (String)request.getSession().getAttribute("privKey");
			checkedKey = (String)request.getSession().getAttribute("keysize");
		}

		if("512".equals(checkedKey))
		{
			k1=true;
		}
		if("1024".equals(checkedKey))
		{
			k2=true;

		}
		if("2048".equals(checkedKey))
		{
			k3=true;
		}
		if("4096".equals(checkedKey))
		{
			k4=true;
		}

		//System.out.println(k1);
		//System.out.println(k2);
		//System.out.println(k3);
		//System.out.println(k4);

	%>

	<script type="text/javascript">
		$(document).ready(function() {



			$('#descryptmsg').hide();

			$('#submit').click(function(event) {
				$('#form').delay(200).submit()
			});

			$('#publickeyparam').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#privatekeyparam').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});


			$('#message').keyup(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#keysize1').click(function(event) {
				//
				// event.preventDefault();
				$('#form1').delay(200).submit()
			});

			$('#keysize2').click(function(event) {
				//
				// event.preventDefault();
				$('#form1').delay(200).submit()
			});

			$('#keysize3').click(function(event) {
				//
				// event.preventDefault();
				$('#form1').delay(200).submit()
			});

			$('#keysize4').click(function(event) {
				//
				// event.preventDefault();
				$('#form1').delay(200).submit()
			});

			$('#cipherparameter1').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#cipherparameter2').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#cipherparameter3').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#cipherparameter4').click(function(event) {
				//
				// event.preventDefault();
				$('#form').delay(200).submit()
			});

			$('#encryptparameter').click(function(event) {
				//
				$('#descryptmsg').hide();
			});

			$('#decryptparameter').click(function(event) {

				$('#descryptmsg').show();
			});


			$('#form').submit(function(event) {
				//
				$('#output').html('<img src="images/712.GIF"> loading...');
				event.preventDefault();
				$.ajax({
					type : "POST",
					url : "DSAFunctionality", //this is my servlet

					data : $("#form").serialize(),
					success : function(msg) {
						$('#output').empty();
						$('#output').append(msg);

					}
				});
			});

		});
	</script>
</head>
<body>
<div id="page">
	<%@ include file="include.jsp"%>
	<div id="loading" style="display: none;">
		<img src="images/712.GIF" alt="" />Loading!
	</div>

	<article id="contentWrapper" role="main">
		<section id="content">
			<fieldset name="RSA">
				<legend>
					<b> DSA Key generation, Sign file, Verify Signature </b>
				</legend>
				<fieldset name="RSA Key Size">
					<legend>
						<b> Key Size </b>
					</legend>

					<form id="form1" method="GET" name="form1"  action="DSAFunctionality?q=setNeKey">
						Generate DSA Keys <input <% if(k1) {  %> checked <% } %>

																		id="keysize1"  type="radio" name="keysize"
																		value="512">512 bit
						<input <% if(k2) {  %> checked <% } %> id="keysize2" type="radio" name="keysize"
											   value="1024">1024 bit
						<input <% if(k3) {  %> checked <% } %> id="keysize3" type="radio" name="keysize"
											   value="2048">2048 bit
					</form>
				</fieldset>


				<form id="form2" name="form2" method="POST" action="DSAFunctionality" enctype="multipart/form-data">
					<input type="hidden" name="methodName" id="methodName"
						   value="CALCULATE_DSA">




					<fieldset name="RSA2"   >

						<legend>
							<b> DSA Signer/Verifier</b>
						</legend>

						<input checked id="encryptparameter" type="radio" name="encryptdecryptparameter"
							   value="encrypt">Sign File

						<input id="decryptparameter" type="radio" name="encryptdecryptparameter"
							   value="decryprt">Verify Signature Message
						<br>

						<table border="1" style="width:80pc">
							<tr>
								<th>DSA Public Key </th>
								<th>DSA Private Key </th>
								<th>DSA  </th>
							</tr>

							<tr>
								<td>
									<textarea rows="20" cols="50"  name="publickeyparam" id="publickeyparam"><%= pubKey %></textarea>
								</td>
								<td>
									<textarea rows="20" cols="50"  name="privatekeyparam" id="privatekeyparam"><%= privKey %></textarea>
								</td>


								<td rowspan="3" width="80%">
									<%@ include file="footer_adsense.jsp"%>
									<p><strong>The DSA Algorithm</strong></p>

									<p>DSA stands for "Digital Signature Algorithm" - and is specifically designed to produce digital signatures, not perform encryption.</p>
									<p>The requirement for public/private keys in this system is for a slightly different purpose - whereas in RSA, a key is needed so anyone can encrypt, in DSA a key is needed so anyone can verify. In RSA, the private key allows decryption; in DSA, the private key allows signature creation.</p>

									<p> DSA Private Key is used for generating Signature file  </p>
									<p> DSA public Key is used for Verifying the Signature.  </p>
								</td>

							</tr>

							<tr>

								<td>
									Input file to be Signed (Signature file will get downloaded)
									<input type="file" id="upfile" name="upfile">

									<div id="descryptmsg">
										Upload Signature file <input type="file" id="sigfile" name="sigfile">
										</div>

								</td>
								<td width="50%">
									<b>output</b><div id="output">

									<%

										String value =(String)session.getAttribute("msg");
										if(null==value)
										{
											value="";
										}

									%>

									<%=value%>


									<input type="submit" value="Submit">
								</div>
								</td>




							</tr>
							<tr>
								<td colspan="2" width="20%">
									Ciphers
									<br/>
									<input id="cipherparameter3" type="radio" name="cipherparameter"
										   checked value="SHA256withDSA"  >SHA256withDSA
									<br/>
									<input id="cipherparameter1" type="radio" name="cipherparameter"
										   value="NONEwithDSA">NONEwithDSA
									<br/>
									<input id="cipherparameter2" type="radio" name="cipherparameter"
										   value="SHA224withDSA">SHA224withDSA
									<br/>
									<input id="cipherparameter4" type="radio" name="cipherparameter"
										   value="SHA1withDSA">SHA1withDSA
									<br/>
								</td>

							</tr>



						</table>


					</fieldset>
			</fieldset>

			</form>

			<table border="0" style="width:500px">
				<tr>
					<td><%@ include file="footer.jsp"%></td>
				</tr>
			</table>
			<%@ include file="include_security_links.jsp"%>
<br/>
			<br/>
			<blockquote>
				<pre><strong>OpenSSL Commands for Generatoing DSA Param, Singing File &amp; verify File</strong><br /><br />openssl dsaparam 2048 &lt; /dev/random &gt; dsa_param.pem<br />openssl gendsa dsa_param.pem -out dsa_priv.pem<br />openssl dsa -in dsa_priv.pem -pubout -out dsa_pub.pem<br /><br /># DSA system now made up of: dsa_param.pem, dsa_pub.pem, dsa_priv.pem<br /><br />echo "foobar" &gt; foo.txt<br />openssl sha1 &lt; foo.txt &gt; foo.txt.sha1<br />openssl dgst -dss1 -sign dsa_priv.pem foo.txt.sha1 &gt; foo.txt.sig<br />openssl dgst -dss1 -verify dsa_pub.pem -signature foo.txt.sig foo.txt.sha1</pre>
			</blockquote>


			<p><br />DSA (Digital Signature Algorithm)<br />DSA is a variant on the ElGamal and Schnorr algorithms creates a 320 bit signature, but with 512-1024 bit security security again rests on difficulty of computing discrete logarithms has been quite widely accepted</p>
			<p>DSA Key Generation <br />firstly shared global public key values (p,q,g) are chosen:<br />choose a large prime p = 2 power L <br />where L= 512 to 1024 bits and is a multiple of 64 <br />choose q, a 160 bit prime factor of p-1 <br />choose g = h power (p-1)/q <br />for any h1 <br />then each user chooses a private key and computes their public key: <br />choose x compute y = g power x(mod p)</p>
			<p>DSA key generation is related to, but somewhat more complex than El Gamal. Mostly because of the use of the secondary 160-bit modulus q used to help speed up calculations and reduce the size of the resulting signature.</p>
			<p>DSA Signature Creation and Verification</p>
			<p>to sign a message M <br />generate random signature key k, k compute <br />r = (g power k(mod p))(mod q) <br />s = k-1.SHA(M)+ x.r (mod q) <br />send signature (r,s) with message</p>
			<p>to verify a signature, compute: <br />w = s-1(mod q) <br />u1= (SHA(M).w)(mod q) <br />u2= r.w(mod q) <br />v = (g power u1.y power u2(mod p))(mod q) <br />if v=r then the signature is verified</p>

		</section>







	</article>

</div>
</body>
</html>