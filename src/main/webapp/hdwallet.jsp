<%@ page import="z.y.x.r.LoadPropertyFileFunctionality"%>
<%@ page import="org.apache.http.client.methods.HttpPost"%>
<%@ page import="org.apache.http.entity.StringEntity"%>
<%@ page import="org.apache.http.client.HttpClient"%>
<%@ page import="org.apache.http.impl.client.HttpClients"%>
<%@ page import="org.apache.http.HttpResponse"%>
<%@ page import="org.apache.http.HttpEntity"%>
<%@ page import="java.io.BufferedReader"%>
<%@ page import="java.io.InputStreamReader"%>
<%@ page import="com.google.gson.Gson"%>
<%@ page import="org.apache.http.util.EntityUtils"%>
<%@ page import="z.y.x.blockchain.WalletFunctionality"%>
<%@ page import="z.y.x.blockchain.WalletPojo"%>
<!DOCTYPE html>
<html>
<head>


<!-- JSON-LD markup generated by Google Structured Data Markup Helper. -->
<script type="application/ld+json">
        {
            "@context" : "http://schema.org",
            "@type" : "SoftwareApplication",
            "name" : "HD Deterministic Key Generator",
            "image" : "https://8gwifi.org/images/site/hdwallet.jpg",
            "url" : "https://8gwifi.org/hdwallet.jsp",
            "author" : {
                "@type" : "Person",
                "name" : "Anish Nath"
            },
            "datePublished" : "2023-05-15",
            "applicationCategory" : [ "hd wallet" , "hd wallet online" , "wallet debugger", "eth wallet" , "bitcoin wallet" ],
            "downloadUrl" : "https://8gwifi.org/hdwallet.jsp",
            "operatingSystem" : "Linux,Unix,Windows,Redhat,RHEL,Fedora,Ubuntu,Android,iPhone",
            "requirements" : "hd wallet,hd wallet online,wallet debugger,eth wallet,bitcoin wallet",
            "softwareVersion" : "v1.0"
        }
    </script>

<title>Hierarchical deterministic (HD) Key Generator</title>
<meta content='text/html; charset=UTF-8' http-equiv='Content-Type'>

<meta name="keywords" content="hd wallet,hd wallet online,wallet debugger,eth wallet,bitcoin wallet">
<meta name="description"
	content="Hierarchical deterministic (HD) Key Generator, hd wallet,hd wallet online,wallet debugger,eth wallet,bitcoin wallet">
<meta name="robots" content="index,follow" />
<meta name="googlebot" content="index,follow" />
<meta name="resource-type" content="document" />
<meta name="classification" content="tools" />
<meta name="language" content="en" />
<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

<%@ include file="header-script.jsp"%>

<%
String words = "12";
String language = "english";
String path = "m/0'/0'/0'";
String password = "";
String raw_entropy = "";
String root_only = "true";
String no_of_address = "10";
String mnemonic = "";

String payload = "{\n" + "    \"language\": \"" + language + "\",\n" + "    \"words\": " + Integer.valueOf(words)
		+ " ,\n" + "    \"path\": \"" + path + "\" ,\n" + "    \"password\":  \"" + password + "\",\n"
		+ "    \"raw_entrypoy\":  " + Boolean.valueOf(raw_entropy) + " ,\n" + "    \"no_of_address\":  "
		+ Integer.valueOf(no_of_address) + " ,\n" + "    \"root_only\":  " + Boolean.valueOf(root_only) + "\n" + "}";

String url1 = LoadPropertyFileFunctionality.getConfigProperty().get("blockchain") + "generateWallet";

HttpPost postRequest = new HttpPost(url1);
postRequest.setHeader("Content-type", "application/json");
postRequest.setEntity(new StringEntity(payload));
// Create the HTTP client and execute the request
HttpClient client = HttpClients.createDefault();
HttpResponse postResponse = client.execute(postRequest);
// Extract the response entity as a string
HttpEntity entity = postResponse.getEntity();
if (postResponse.getStatusLine().getStatusCode() != 200) {
	BufferedReader br1 = new BufferedReader(new InputStreamReader((postResponse.getEntity().getContent())));
	StringBuilder content1 = new StringBuilder();
	String line;
	while (null != (line = br1.readLine())) {
		content1.append(line);
	}
	return;
}
Gson gson = new Gson();
String responseString = EntityUtils.toString(entity);
String result = gson.fromJson(responseString, WalletFunctionality.BlockChainResponse.class).getResult();

WalletPojo walletPojo = gson.fromJson(result, WalletPojo.class);

if (walletPojo != null) {
	mnemonic = walletPojo.getMnemonic();
}
%>

<script type="text/javascript">
	$(document)
			.ready(
					function() {

						$('#submit').click(function(event) {
							$('#emailInput').val("");
							$('#form').delay(200).submit()
						});

						$('#parse_Wallet').click(function(event) {

							const mnemonicWords = $('#mnemonic').val().trim().split(" ");
							const wordCount = mnemonicWords.length;
							if (wordCount === 12 || wordCount === 15 || wordCount === 18 || wordCount === 21 || wordCount === 24 ) {
								$('#parse_wallet_with_mnemonic').val("true");
								$('#emailInput').val("");
								$('#form').delay(200).submit()
							} else {
								alert("The mnemonic phrase does not have a valid word count.(12/15/18/21)");
							}
						});

						$('#sendEmail').click(function(event) {
							var email = prompt("Enter your email:");
							if (email !== null && email.trim() !== "") {
								if (validateEmail(email)) {
									$('#emailInput').val(email); // Assuming you have an input field with the id 'emailInput'
									$('#form').submit();
								} else {
									alert("Invalid email format. Please enter a valid email address.");
								}
							}
						});

						function validateEmail(email) {
							var emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
							return emailRegex.test(email);
						}

						$('#no_of_address').keyup(function(event) {
							//
							// event.preventDefault();

							if ($('#no_of_address').val() > 100) {
								$('#no_of_address').val(100);
							}
							$('#emailInput').val("");
							$('#form').delay(200).submit()
						});

						$('#raw_entropy').change(function(event) {
							$('#emailInput').val("");
							$('#form').submit()
						});

						$('#root_only').change(function(event) {
							//
							// event.preventDefault();
							$('#emailInput').val("");
							$('#form').delay(200).submit()
						});

						$('#words').change(function(event) {
							//
							// event.preventDefault();
							$('#emailInput').val("");
							$('#form').delay(200).submit()
						});

						$('#language').change(function(event) {
							//
							// event.preventDefault();
							$('#emailInput').val("");
							$('#form').delay(200).submit()
						});

						$('#path').change(function(event) {
							//
							// event.preventDefault();
							$('#emailInput').val("");
							$('#form').delay(200).submit()
						});

						$('#password').keyup(function(event) {
							//
							// event.preventDefault();
							$('#emailInput').val("");
							$('#form').delay(200).submit()
						});

						$('#form')
								.submit(
										function(event) {
											//
											$('#output').html('<img src="images/712.GIF"> loading...');
											$('#wallet-container').empty();
											$('#address-container').empty();
											$('#extraMessage').empty();
											event.preventDefault();
											$
													.ajax({
														type : "POST",
														url : "WalletFunctionality", //this is my servlet
														data : $("#form").serialize(),
														success : function(msg) {
															//console.log(msg)
															if (msg.indexOf('RootKey') !== -1) {
																$(
																		'#address-container')
																		.empty();


																var walletData = JSON.parse(msg);
																$('#mnemonic').val(walletData.Mnemonic);
																if (walletData.extraMessage !== undefined) {
																	$('#extraMessage').append('<font size=\"2\" color=\"green\"> Email Send Successfully.</font>');
																}
																var addresses = walletData.Addresses;
																if (addresses !== undefined) {
																	var tablesContainer = $('#address-container');
																	tablesContainer
																			.append("<hr>")
																	tablesContainer
																			.append("<h2>Account Keys Details</h2>")

																	//var tablesContainer = $('#tables-container');
																	var table = '<table class="table table-responsive">';
																	table += '<thead><tr><th>Path</th><th>Hex Public Key</th><th>Hex Private Key</th><th>ETH Address</th><th>BTC Address</th><th>WIF</th></tr></thead>';
																	for (var i = 0; i < addresses.length; i++) {
																		var address = addresses[i];
																		table += '<tbody><tr><td><code>' + address.Path + '</code></td>'
																				+ '<td><code>' + address.HexPublicKey + '</code></td>'
																				+ '<td><code>' + address.HexPrivateKey + '</code></td>'
																				+ '<td><code>' + address.ETHAddress + '</code></td>'
																				+ '<td><code>' + address.BTCAddress + '</code></td>'
																				+ '<td><code>' + address.WIF + '</code></td></tr></tbody>';
																	}
																	table += '</table>';
																	tablesContainer.append(table);


																}

																var walletContainer = $('#wallet-container');
																walletContainer
																		.append("<h2>Wallet RootKeys Details</h2>")


																if (walletData.DerivationPath !== undefined) {

																	var walletTable = '<table class="table-responsive">'
																			+ '<tr><th>RootKey</th><td><code>'
																			+ walletData.RootKey
																			+ '</code></td></tr>'
																			+ '<tr><th>Seed</th><td><code>'
																			+ walletData.Seed
																			+ '</code></td></tr>'
																			+ '<tr><th>DerivationPath</th><td><code>'
																			+ (walletData.DerivationPath ? walletData.DerivationPath : "" )
																			+ '</code></td></tr>'
																			+ '<tr><th>AccountPublicKey</th><td><code>'
																			+ (walletData.AccountPublicKey ? walletData.AccountPublicKey : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>AccountPrivateKey</th><td><code>'
																			+ (walletData.AccountPrivateKey ? walletData.AccountPrivateKey : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>BIP32PublicKey</th><td><code>'
																			+ (walletData.BIP32PublicKey ? walletData.BIP32PublicKey : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>BIP32PrivateKey</th><td><code>'
																			+ (walletData.BIP32PrivateKey ? walletData.BIP32PrivateKey : "")
																			+ '</code></td></tr>'
																			+ '</table>';
																	walletContainer.append(walletTable)
																}

																if (walletData.HexPrivateKey !== undefined) {
																	var walletTable = '<table class="table-responsive">'
																			+ '<tr><th>RootKey</th><td><code>'
																			+ walletData.RootKey
																			+ '</code></td></tr>'
																			+ '<tr><th>Seed</th><td><code>'
																			+ walletData.Seed
																			+ '</code></td></tr>'
																			+ '<tr><th>BTCAddress</th><td><code>'
																			+ (walletData.BTCAddress ? walletData.BTCAddress : "" )
																			+ '</code></td></tr>'
																			+ '<tr><th>ETHAddress</th><td><code>'
																			+ (walletData.ETHAddress ? walletData.ETHAddress : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>Ed25519Address</th><td><code>'
																			+ (walletData.Ed25519Address ? walletData.Ed25519Address : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>Sr25519Address</th><td><code>'
																			+ (walletData.Sr25519Address ? walletData.Sr25519Address : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>Sr25519AddressSS58</th><td><code>'
																			+ (walletData.Sr25519AddressSS58 ? walletData.Sr25519AddressSS58 : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>Sr25519AddressSS58</th><td><code>'
																			+ (walletData.Sr25519AddressSS58 ? walletData.Sr25519AddressSS58 : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>WIF</th><td><code>'
																			+ (walletData.WIF ? walletData.WIF : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>HexPrivateKey</th><td><code>'
																			+ (walletData.HexPrivateKey ? walletData.HexPrivateKey : "")
																			+ '</code></td></tr>'
																			+ '<tr><th>HexPublicKey</th><td><code>'
																			+ (walletData.HexPublicKey ? walletData.HexPublicKey : "")
																			+ '</code></td></tr>'
																			+ '</table>';
																	walletContainer.append(walletTable)

																	var blsi = walletData.BLS;

																	if (blsi !== undefined) {
																		walletContainer.append("<hr>")
																		walletContainer.append("<h2>BLS Keys Details</h2>")
																		var blstable = '<table class="table table-responsive">'
																				+ '<tr><th>HexPrivateKey</th><td><code>'
																				+ blsi.HexPrivateKey
																				+ '</code></td></tr>'
																				+ '<tr><th>HexPublicKey</th><td><code>'
																				+ blsi.HexPublicKey
																				+ '</code></td></tr>'
																				+ '</table>';
																		walletContainer.append(blstable);
																	}
																}

																$('#output').empty();
																$('#emailInput').empty();
																$('#emailInput').empty();
															} else {
																$('#output').empty();
																$('#emailInput').empty();
																$('#emailInput').empty();
																$('#output').append(msg);
															}

														}
													});
										});

					});
</script>
</head>


<%@ include file="body-script.jsp"%>

<h1 class="mt-4">Hierarchical deterministic (HD) Key Generator</h1>
<hr>


<div id="loading" style="display: none;">
	<img src="images/712.GIF" alt="" />Loading!
</div>


<form id="form" class="form-horizontal" method="POST">
	<input type="hidden" name="methodName" id="methodName"
		value="WALLET_GEN">

	<input type="hidden" name="parse_wallet_with_mnemonic" id="parse_wallet_with_mnemonic"  value="false">
	<input type="hidden" name="emailInput" id="emailInput"  value="">
	<input type="hidden" name="j_csrf" value="<%=request.getSession().getId() %>" >


	<div class="row g-3">
		<div class="col-md">
			<div class="form-floating">
				<select class="form-select" id="words" name="words"
					aria-label="mnemonic(No of Words)">
					<option selected>Open this select menu</option>
					<option value="12" selected>Twelve</option>
					<option value="15">Fifteen</option>
					<option value="18">Eighteen</option>
					<option value="21">Twenty one</option>
				</select> <label for="words">mnemonic(No of Words)</label>
			</div>
		</div>
		<div class="col-md">
			<div class="form-floating">
				<select class="form-select" id="language" name="language"
					aria-label="mnemonic language">
					<option value="english">English</option>
					<option value="french">French</option>
					<option value="italian">Italian</option>
					<option value="japanese">Japanese</option>
					<option value="korean">Korean</option>
					<option value="spanish">Spanish</option>
					<option value="chinesesimplified">Chinesesimplified</option>
					<option value="chinesetraditional">Chinesetraditional</option>
				</select> <label for="language">mnemonic language</label>
			</div>
		</div>
		<div class="col-md">
			<div class="form-floating">
				<select class="form-select" id="path" name="path"
					aria-label="Derivation Paths">
					<option value="m/44'/60'/0'">m/44'/60'/0' (ETH)</option>
					<option value="m/44'/0'/0'">m/44'/0'/0' (Bitcoin)</option>
					<option value="m/44'/1'/0'">m/44'/1'/0' (test Net all
						coins)</option>
					<option value="m/44'/2'/0'">m/44'/2'/0' (LitCoin)</option>
					<option value="m/44'/3'/0'">m/44'/3'/0' (Dogecoin)</option>
					<option value="m/44'/5'/0'">m/44'/5'/0' (Dash)</option>
					<option value="m/44'/501'/0'">m/44'/501'/0' (Solana)</option>
					<option value="m/44'/60'/0'">m/44'/60'/0' (ETH)</option>
					<option value="m/44'/61'/0'">m/44'/61'/0' (ETC)</option>
					<option value="m/44'/133'/0'">m/44'/133'/0' (Zcash)</option>
					<option value="m/44'/148'/0'">m/44'/148'/0' (Vertcoin)</option>
					<option value="m/44'/194'/0'">m/44'/194'/0' (Bitcoin Gold)</option>
					<option value="m/44'/2301'/0'">m/44'/2301'/0' (Bitcoin
						Cash)</option>
					<option value="m/44'/2303'/0'">m/44'/2303'/0' (Bitcoin SV)</option>
					<option value="m/44'/246'/0'">m/44'/246'/0' (Horizen)</option>
					<option value="m/44'/257'/0'">m/44'/257'/0' (Bitcoin
						Private)</option>
					<option value="m/44'/2748'/0'">m/44'/2748'/0' (Bitcoin
						Interest)</option>
					<option value="m/44'/289'/0'">m/44'/289'/0' (LBRY Credits)</option>
					<option value="m/44'/344'/0'">m/44'/344'/0' (Auxilium)</option>
					<option value="m/44'/356'/0'">m/44'/356'/0' (Resistance)</option>
					<option value="m/44'/363'/0'">m/44'/363'/0' (CPUchain)</option>
					<option value="m/44'/401'/0'">m/44'/401'/0' (Utopiacoin)</option>
					<option value="m/44'/425'/0'">m/44'/425'/0' (AION)</option>
					<option value="m/44'/494'/0'">m/44'/494'/0' (Ravencoin)</option>
					<option value="m/44'/524'/0'">m/44'/524'/0'
						(AmsterdamCoin)</option>
					<option value="m/44'/555'/0'">m/44'/555'/0' (Bitcoin
						Smart)</option>
					<option value="m/44'/574'/0'">m/44'/574'/0' (reserved)</option>
					<option value="m/44'/575'/0'">m/44'/575'/0' (VIDT
						Datalink)</option>
					<option value="m/44'/588'/0'">m/44'/588'/0' (SafeCapital)</option>
					<option value="m/44'/600'/0'">m/44'/600'/0' (Unit-e)</option>
					<option value="m/44'/666'/0'">m/44'/666'/0' (Achain)</option>
					<option value="m/44'/668'/0'">m/44'/668'/0' (SelfSell)</option>
				</select> <label for="language">Derived Path</label>
			</div>
		</div>
	</div>
	<div class="row g-2">
		<div class="col-md">
			<div class="form-floating">
				<input class="form-check-input" type="checkbox" value="true"
					id="root_only" name="root_only"> <label for="root_only">Root
					Only</label>
			</div>
		</div>
		<div class="col-md">
			<div class="form-floating">
				<input class="form-check-input" type="checkbox" value="true"
					id="raw_entropy" name="raw_entrypoy"> <label
					class="form-label for="raw_entropy">RawEntropy</label>
			</div>
		</div>
	</div>
	<div class="row">
		<div class="col">
			<label class="form-label">NoOfAddress</label> <input type="number"
				class="form-control" id="no_of_address" name="no_of_address"
				max="100" min="0" value="10">

		</div>

		<div class="col">
			<label class="form-label">Wallet Password</label> <input
				type="password" class="form-control" id="password" name="password"
				placeholder="Wallet password" value="">

		</div>
	</div>

	<div class="row">
		<div class="col">
			<label for="mnemonic" class="form-label">mnemonic</label> <input
				type="text" class="form-control" id="mnemonic" name="mnemonic"
				value="<%=mnemonic%>" placeholder="mnemonic" aria-label="mnemonic">
		</div>
	</div>

	<input class="btn btn-primary" type="button" id="submit"
		name="Generate Wallet" value="Generate Wallet"> <input
		class="btn btn-secondary" type="button" id="parse_Wallet"
		name="parse_Wallet" value="Parse Wallet"> <input
		class="btn btn-outline-secondary" type="button" id="sendEmail"
		name="Generate Wallet" value="Generate Wallet & Send Email">

	<div id="output"></div>
	<div id="extraMessage"></div>
	<div id="wallet-container"></div>
	<div id="address-container"></div>

</form>
<hr>
<div class="sharethis-inline-share-buttons"></div>
<%@ include file="thanks.jsp"%>

<hr>

<%@ include file="footer_adsense.jsp"%>

<h2 class="mt-4" id="thersaalgorithm">Hierarchical deterministic</h2>
<p>
	Hierarchical deterministic wallets are a type of deterministic wallets
	that derive all of the public/private key pairs from a single master
	seed value. This seed value is used to generate a master private key
	(xprv) which then can be imported to any BIP 32 compliant HD wallet. </p>
<p>Mnemonic code for generating deterministic keys</p>
<p>
	To create a hierarchical deterministic wallet, you only need one 128,
	256 or 512 bit random number (entropy). This entropy is then encoded
	into 12, 18 or 24 words respectively. These words are called mnemonic
	code words. The mnemonic code words are then used to derive the
	master private key. The master private key can then be imported to any
	BIP 32 compliant HD wallet. </p>

<b>Dervied Path</b>

<p>The derivation path define the following 5 levels in BIP32 path:</p>
<code>m / purpose / coin_type / account / change / address_index</code>

<p><b> Wallet Import Format</b></p>
The WIF format for Bitcoin private keys is as follows:
<code>
private key in Base58Check format_NetworkCcode flag
</code>
<p>Ethereum private keys, they are typically represented as a 64-character hexadecimal string and are encoded using Base58Check to produce Wallet Import Format private keys.</p>
<%@ include file="addcomments.jsp"%>

</div>
<%@ include file="body-close.jsp"%>